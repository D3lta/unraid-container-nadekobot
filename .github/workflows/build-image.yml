name: Check & Build & Deploy
on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:
  
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: d3lta/unraid-container-nadekobot

jobs:
  check_version:
    runs-on: ubuntu-22.04
    outputs:
      nadekobot_version: ${{ steps.version_check.outputs.NADEKOBOTVERSION }}
      skip: ${{ steps.version_check.outputs.skip }}
    permissions:
      contents: write
    steps:
      - name: "Check if newer version is available"
        id: version_check
        uses: actions/github-script@v7
        with:
            script: |
                  const remoteRepoURL = `https://gitlab.com/Kwoth/nadekobot/-/releases.json`;
                  const remoteRepo = await fetch(remoteRepoURL);
                  const remoteRepoData = await remoteRepo.json();
                  const latest = remoteRepoData[0]?.tag;
                  
                  const localRepo = await github.rest.repos.getLatestRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  });
                  
                  const current = localRepo?.data?.tag_name;

                  core.notice(`The current version is ${current} and latest available is ${latest}`);

                  if(!current || !latest) {
                    core.warning(`Invalid remote/local version fetched`);
                    core.setFailed(1);
                    process.exit();
                  }
                  
                  const newerAvailable = (() => {
                    // 0 equal, 1 a>b, -1 b>a
                    const update = (current.localeCompare(latest, undefined, { numeric: true, sensitivity: 'base' }) == -1)
                    core.notice(update);
                    return update
                  })();
                  
                  if(!newerAvailable) {
                    core.notice(`No newer version available`);
                    core.setOutput('skip', 'true');

                    core.setFailed(0);
                    process.exit();
                  }
                  
                  try {
                      github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: `${latest}`,
                        name: `v${latest}`,
                        body: `https://gitlab.com/Kwoth/nadekobot/-/releases/${latest}`
                      });

                      core.notice(`Created new release: v${latest}`);
                      core.setOutput('NADEKOBOTVERSION', latest);
                      core.setOutput('skip', 'false');

                    } catch(e) { 
                      core.error(`Failed to create release`);
                      core.setOutput('skip', 'true');
                    }

  build:
    needs: check_version
    if: ${{ needs.check_version.outputs.skip != 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    env:
        NADEKOBOTVERSION: ${{ needs.check_version.outputs.nadekobot_version }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image with nadekobot version ${{ env.NADEKOBOTVERSION }}
        uses: docker/build-push-action@v6
        with:
          context: ./
          platforms: linux/amd64
          build-args: |
            NADEKOBOT_VERSION=${{ env.NADEKOBOTVERSION }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NADEKOBOTVERSION }}
          push: true
          labels: |
            org.opencontainers.image.source=${{github.server_url}}/${{github.repository}}
            org.opencontainers.image.description=Discord Bot https://gitlab.com/Kwoth/nadekobot for unraid running nadekobot version: ${{ env.NADEKOBOTVERSION }}
            org.opencontainers.image.licenses=MIT
